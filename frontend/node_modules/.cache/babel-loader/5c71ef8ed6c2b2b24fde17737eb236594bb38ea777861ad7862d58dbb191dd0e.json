{"ast":null,"code":"var _jsxFileName = \"D:\\\\hackathon\\\\frontend\\\\src\\\\components\\\\SimpleCaptcha.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { FaSync } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleCaptcha = ({\n  onChange\n}) => {\n  _s();\n  const [captchaText, setCaptchaText] = useState('');\n  const [userInput, setUserInput] = useState('');\n  const [valid, setValid] = useState(false);\n  const canvasRef = useRef(null);\n\n  // Generate random captcha text\n  const generateCaptcha = () => {\n    const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghjkmnpqrstuvwxyz23456789';\n    let captcha = '';\n    for (let i = 0; i < 6; i++) {\n      captcha += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return captcha;\n  };\n\n  // Draw captcha on canvas\n  const drawCaptcha = text => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = '#f0f0f0';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Add noise (dots)\n    for (let i = 0; i < 100; i++) {\n      ctx.fillStyle = `rgba(${Math.random() * 255},${Math.random() * 255},${Math.random() * 255},0.2)`;\n      ctx.fillRect(Math.random() * canvas.width, Math.random() * canvas.height, 2, 2);\n    }\n\n    // Add lines for more noise\n    for (let i = 0; i < 4; i++) {\n      ctx.strokeStyle = `rgba(${Math.random() * 255},${Math.random() * 255},${Math.random() * 255},0.5)`;\n      ctx.beginPath();\n      ctx.moveTo(Math.random() * canvas.width, Math.random() * canvas.height);\n      ctx.lineTo(Math.random() * canvas.width, Math.random() * canvas.height);\n      ctx.stroke();\n    }\n\n    // Draw captcha text\n    ctx.fillStyle = '#333';\n    ctx.font = 'bold 24px Arial';\n    ctx.textBaseline = 'middle';\n    ctx.textAlign = 'center';\n\n    // Draw each character with random rotation\n    for (let i = 0; i < text.length; i++) {\n      ctx.save();\n      ctx.translate(20 + i * 25, canvas.height / 2);\n      ctx.rotate((Math.random() - 0.5) * 0.4);\n      ctx.fillText(text.charAt(i), 0, 0);\n      ctx.restore();\n    }\n  };\n\n  // Initialize and refresh captcha\n  const refreshCaptcha = () => {\n    const newCaptcha = generateCaptcha();\n    setCaptchaText(newCaptcha);\n    setUserInput('');\n    setValid(false);\n\n    // Notify parent component\n    if (onChange) {\n      onChange(false);\n    }\n  };\n\n  // Check if user input matches captcha\n  const verifyCaptcha = value => {\n    setUserInput(value);\n    const isValid = value === captchaText;\n    setValid(isValid);\n\n    // Notify parent component\n    if (onChange) {\n      onChange(isValid);\n    }\n  };\n\n  // Initialize captcha on component mount\n  useEffect(() => {\n    refreshCaptcha();\n  }, []);\n\n  // Draw captcha whenever captchaText changes\n  useEffect(() => {\n    if (captchaText) {\n      drawCaptcha(captchaText);\n    }\n  }, [captchaText]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"captcha-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"form-label\",\n      children: \"Verify you're human\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex align-items-center mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: \"180\",\n        height: \"50\",\n        className: \"captcha-canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"captcha-refresh\",\n        onClick: refreshCaptcha,\n        title: \"Refresh CAPTCHA\",\n        children: /*#__PURE__*/_jsxDEV(FaSync, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: `form-control ${userInput && (valid ? 'is-valid' : 'is-invalid')}`,\n      placeholder: \"Enter the text above\",\n      value: userInput,\n      onChange: e => verifyCaptcha(e.target.value),\n      autoComplete: \"off\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), userInput && !valid && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"invalid-feedback\",\n      children: \"Incorrect CAPTCHA text. Please try again.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleCaptcha, \"fADlyJi9ygImsfpeDDm8DxpNI14=\");\n_c = SimpleCaptcha;\nexport default SimpleCaptcha;\nvar _c;\n$RefreshReg$(_c, \"SimpleCaptcha\");","map":{"version":3,"names":["React","useState","useEffect","useRef","FaSync","jsxDEV","_jsxDEV","SimpleCaptcha","onChange","_s","captchaText","setCaptchaText","userInput","setUserInput","valid","setValid","canvasRef","generateCaptcha","chars","captcha","i","charAt","Math","floor","random","length","drawCaptcha","text","canvas","current","ctx","getContext","clearRect","width","height","fillStyle","fillRect","strokeStyle","beginPath","moveTo","lineTo","stroke","font","textBaseline","textAlign","save","translate","rotate","fillText","restore","refreshCaptcha","newCaptcha","verifyCaptcha","value","isValid","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","title","type","placeholder","e","target","autoComplete","_c","$RefreshReg$"],"sources":["D:/hackathon/frontend/src/components/SimpleCaptcha.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { FaSync } from 'react-icons/fa';\r\n\r\nconst SimpleCaptcha = ({ onChange }) => {\r\n  const [captchaText, setCaptchaText] = useState('');\r\n  const [userInput, setUserInput] = useState('');\r\n  const [valid, setValid] = useState(false);\r\n  const canvasRef = useRef(null);\r\n\r\n  // Generate random captcha text\r\n  const generateCaptcha = () => {\r\n    const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghjkmnpqrstuvwxyz23456789';\r\n    let captcha = '';\r\n    for (let i = 0; i < 6; i++) {\r\n      captcha += chars.charAt(Math.floor(Math.random() * chars.length));\r\n    }\r\n    return captcha;\r\n  };\r\n\r\n  // Draw captcha on canvas\r\n  const drawCaptcha = (text) => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    ctx.fillStyle = '#f0f0f0';\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    \r\n    // Add noise (dots)\r\n    for (let i = 0; i < 100; i++) {\r\n      ctx.fillStyle = `rgba(${Math.random() * 255},${Math.random() * 255},${Math.random() * 255},0.2)`;\r\n      ctx.fillRect(\r\n        Math.random() * canvas.width,\r\n        Math.random() * canvas.height,\r\n        2,\r\n        2\r\n      );\r\n    }\r\n    \r\n    // Add lines for more noise\r\n    for (let i = 0; i < 4; i++) {\r\n      ctx.strokeStyle = `rgba(${Math.random() * 255},${Math.random() * 255},${Math.random() * 255},0.5)`;\r\n      ctx.beginPath();\r\n      ctx.moveTo(Math.random() * canvas.width, Math.random() * canvas.height);\r\n      ctx.lineTo(Math.random() * canvas.width, Math.random() * canvas.height);\r\n      ctx.stroke();\r\n    }\r\n    \r\n    // Draw captcha text\r\n    ctx.fillStyle = '#333';\r\n    ctx.font = 'bold 24px Arial';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.textAlign = 'center';\r\n    \r\n    // Draw each character with random rotation\r\n    for (let i = 0; i < text.length; i++) {\r\n      ctx.save();\r\n      ctx.translate(20 + i * 25, canvas.height / 2);\r\n      ctx.rotate((Math.random() - 0.5) * 0.4);\r\n      ctx.fillText(text.charAt(i), 0, 0);\r\n      ctx.restore();\r\n    }\r\n  };\r\n\r\n  // Initialize and refresh captcha\r\n  const refreshCaptcha = () => {\r\n    const newCaptcha = generateCaptcha();\r\n    setCaptchaText(newCaptcha);\r\n    setUserInput('');\r\n    setValid(false);\r\n    \r\n    // Notify parent component\r\n    if (onChange) {\r\n      onChange(false);\r\n    }\r\n  };\r\n\r\n  // Check if user input matches captcha\r\n  const verifyCaptcha = (value) => {\r\n    setUserInput(value);\r\n    const isValid = value === captchaText;\r\n    setValid(isValid);\r\n    \r\n    // Notify parent component\r\n    if (onChange) {\r\n      onChange(isValid);\r\n    }\r\n  };\r\n\r\n  // Initialize captcha on component mount\r\n  useEffect(() => {\r\n    refreshCaptcha();\r\n  }, []);\r\n\r\n  // Draw captcha whenever captchaText changes\r\n  useEffect(() => {\r\n    if (captchaText) {\r\n      drawCaptcha(captchaText);\r\n    }\r\n  }, [captchaText]);\r\n\r\n  return (\r\n    <div className=\"captcha-container\">\r\n      <label className=\"form-label\">Verify you're human</label>\r\n      <div className=\"d-flex align-items-center mb-2\">\r\n        <canvas \r\n          ref={canvasRef} \r\n          width=\"180\" \r\n          height=\"50\" \r\n          className=\"captcha-canvas\"\r\n        ></canvas>\r\n        <span \r\n          className=\"captcha-refresh\" \r\n          onClick={refreshCaptcha}\r\n          title=\"Refresh CAPTCHA\"\r\n        >\r\n          <FaSync />\r\n        </span>\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        className={`form-control ${userInput && (valid ? 'is-valid' : 'is-invalid')}`}\r\n        placeholder=\"Enter the text above\"\r\n        value={userInput}\r\n        onChange={(e) => verifyCaptcha(e.target.value)}\r\n        autoComplete=\"off\"\r\n      />\r\n      {userInput && !valid && (\r\n        <div className=\"invalid-feedback\">\r\n          Incorrect CAPTCHA text. Please try again.\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleCaptcha;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}